// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../src/prisma/client"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String
  role      UserRole @default(USER) @map("user_role")
  isActive  Boolean? @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt DateTime @default(now()) @map("updated_at") @db.DateTime(0)

  comments Comment[]

  @@map("users")
}

enum UserRole {
  USER
  ADMIN
}

model AtmLocations {
  id        String              @id @default(cuid())
  lng       Float
  lat       Float
  bank      String
  name      String
  address   String
  hours     String
  images    AtmLocationImages[]
  comments  Comment[]
  createdAt DateTime            @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt DateTime            @default(now()) @map("updated_at") @db.DateTime(0)

  @@map("atm_locations")
}

model AtmLocationImages {
  id             String       @id @default(cuid())
  image_url      String
  atm_location   AtmLocations @relation(fields: [atm_locationId], references: [id], onDelete: Cascade)
  atm_locationId String

  @@map("atm_location_images")
}

model Comment {
  id             String       @id @default(cuid())
  author         Int
  text           String
  atm_location   AtmLocations @relation(fields: [atm_locationId], references: [id], onDelete: Cascade)
  atm_locationId String
  createdAt      DateTime     @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt      DateTime     @default(now()) @map("updated_at") @db.DateTime(0)

  user User @relation(fields: [author], references: [id])

  @@map("comments")
}
